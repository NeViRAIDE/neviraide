local wk = require 'which-key'
wk.setup {
    plugins = {
        marks = true,
        registers = true,
        spelling = { enabled = true, suggestions = 20 },
        presets = {
            operators = true,
            motions = true,
            text_objects = true,
            windows = true,
            nav = true,
            z = true,
            g = true,
        },
    },
    operators = { gc = 'Comments' },
    key_labels = {
        ['<leader>'] = "Space",
        ['<space>'] = 'Space',
        ['<cr>'] = 'Enter',
        ['<tab>'] = 'TAB',
        ['<c-w>'] = "Ctrl + w",
        ['<C-S>'] = "Ctrl + s",
        ['<C-L>'] = "Ctrl + l",
        ['<C-Bslash>'] = "Ctrl + \\",
    },
    icons = { breadcrumb = '»', separator = '➜', group = '+' },
    popup_mappings = { scroll_down = '<c-j>', scroll_up = '<c-k>' },
    window = {
        border = 'rounded',
        position = 'bottom',
        margin = { 1, 6, 1, 6 },
        padding = { 2, 2, 2, 2 },
        winblend = 10,
    },
    layout = {
        height = { min = 4, max = 25 },
        width = { min = 20, max = 50 },
        spacing = 13,
        align = 'center',
    },
    hidden = { "<Plug>", "execute v:count .", "<silent>", ":", "<Cmd>", "<CR>", "call", "lua", "^:", "^ " }, -- hide mapping boilerplate
    ignore_missing = false,
    show_help = true,
    triggers = 'auto',
    triggers_blacklist = { i = { 'j', 'k' }, v = { 'j', 'k' } },
}
wk.register({
    ['<c-s>'] = { ':wa<cr>', 'Save all opened files' },
    ['<leader>'] = {
        name = 'leader key actions',
        g = { ':lua _lazygit_toggle()<CR>', 'Git' },
        f = { ':lua vim.lsp.buf.format {async = true}<CR>', 'Format file' },
        F = { ':Telescope file_browser<cr>', 'File browser' },
        k = { ':WhichKey<cr>', 'Keybindings' },
        N = { name = "Neogen",
            f = { ':Neogen func<cr>', 'Create function annotation' },
            c = { ':Neogen class<cr>', 'Create class annotation' },
            t = { ':Neogen type<cr>', 'Create type annotation' },
            F = { ':Neogen file<cr>', 'Create file annotation' },
        },
        C = { name = 'Color Picker',
            p = { ":PickColor<cr>", "Pick color" },
            r = { ':ConvertHEXandRGB<cr>', 'Conver HEX and RGB' },
            h = { ':ConvertHEXandHSL<cr>', 'Convert HEX and HSL' },
        },
        p = { name = "Python",
            r = { ':!python %<cr>', 'Run code' },
            i = { ':lua _ipython_toggle()<cr>', 'Run IPython' },
            I = { ':lua _current_file_ipython_toggle()<cr>', 'Run current file in IPython' },
            l = { ':ToggleTermSendCurrentLine<cr>', 'Send current line to terminal' },
        },
        -- TODO: Keybindings for all dap's actions
        D = { name = "DAP",
            b = {':DapToggleBreakpoint<cr>', 'Toggle breakpoint'},
            r = {':DapContinue<cr>', 'Run debug'},
        },
        n = { name = "Notes",
            l = {
                ":Telescope todo-comments todo theme=ivy initial_mode=normal previewer=false layout_config={bottom_pane={height=12}}<cr>",
                'Notes list',
            },
            f = { 'OFIX: <esc>:lua require("Comment.api").toggle.linewise.current()<cr>A', 'FIX' },
            t = { 'OTODO: <esc>:lua require("Comment.api").toggle.linewise.current()<cr>A', 'TODO' },
            h = { 'OHACK: <esc>:lua require("Comment.api").toggle.linewise.current()<cr>A', 'HACK' },
            w = { 'OWARN: <esc>:lua require("Comment.api").toggle.linewise.current()<cr>A', 'WARN' },
            p = { 'OPERF: <esc>:lua require("Comment.api").toggle.linewise.current()<cr>A', 'PERF' },
            n = { 'ONOTE: <esc>:lua require("Comment.api").toggle.linewise.current()<cr>A', 'NOTE' },
        },
        t = { name = 'Telescope',
            p = { ":Telescope project display_type=full<cr>", 'Projects', },
            m = { ":Telescope man_pages<cr>", 'Manual pages', },
            r = { ":Telescope oldfiles<cr>", 'Recent files', },
            b = { ":Telescope buffers<cr>", 'Show open buffers', },
            f = { ":Telescope find_files<cr>", 'Find files', },
            w = { ":Telescope live_grep<cr>", 'Find word', },
            h = { ":Telescope help_tags<cr>", 'Help tags', },
            n = { ":Telescope notify<cr>", 'Notifications', },
        },
        d = { name = 'Diagnostics',
            w = {
                ":lua require('telescope.builtin').diagnostics(require('telescope.themes').get_ivy({initial_mode = 'normal', previewer = false, layout_config = {bottom_pane = {height = 12}}}))<cr>",
                'workspace diagnostics',
            },
            s = { ':Lspsaga show_line_diagnostics<cr>', 'show diagnostic line' },
            p = { ':Lspsaga diagnostic_jump_prev<cr>', 'jump to previous diagnostic line' },
            n = { ':Lspsaga diagnostic_jump_next<cr>', 'jump to next diagnostic line' },
        },
        l = { name = 'LSP',
            O = { ':LSoutlineToggle<CR>', 'Toggle winbar/outline' },
            h = { ':Lspsaga hover_doc<cr>', 'Hover' },
            r = {
                ":lua require('telescope.builtin').lsp_references(require('telescope.themes').get_ivy({initial_mode = 'normal', previewer = false, layout_config = {bottom_pane = {height = 12}}}))<cr>",
                'References',
            },
            a = { ':Lspsaga code_action<cr>', 'Code action' },
            p = { ':Lspsaga preview_definition<cr>', 'Preview definition' },
            f = { ':Lspsaga lsp_finder<cr>', 'Finder' },
            R = { ':Lspsaga rename<cr>', 'Rename' },
            i = { ':Telescope lsp_implementations()<cr>', 'Implementation' },
            D = { ':lua vim.lsp.buf.declaration()<cr>', 'Declaration' },
            d = { ':Telescope lsp_definitions<cr>', 'Definition' },
            t = { ':Telescope lsp_type_definitions<cr>', 'Type definition' },
            s = { ':Lspsaga signature_help<cr>', 'Signature help' },
            S = {
                name = "Symbols",
                d = { ':Telescope lsp_document_symbols<cr>', 'Document symbols' },
                w = { ':Telescope lsp_workspace_symbols<cr>', 'Workspace symbols' },
                D = { ':Telescope lsp_dynamic_workspace_symbols<cr>', 'Dynamic workspace symbols' }
            }
        },
        V = { name = "Visit link",
            b = { ':VisitLinkInBuffer<cr>', 'Choose from buffer' },
            u = { ':VisitLinkUnderCursor<cr>', 'Under cursor' },
            n = { ':VisitLinkNearCursor<cr>', 'Near cursor' }
        }
    },
}, {
    mode = "n",
    prefix = "",
    buffer = nil,
    silent = true,
    noremap = true,
    nowait = false,
})
